import numpy
#S型函数作为激活函数来自scipy.special
import scipy.special
#定义神经网络的类
class neuralNetwork:
    
    #初始化神经网络，定义初始函数
    def _init_(self,inputnodes,hiddennodes,outputnodes,learningrate):
        #设置每一个输入、隐藏、输出层的节点数
        self.inodes=inputnodes
        self.hnodes=hiddennodes
        self.onodes=outputnodes
        
        #设置链接权重矩阵
        self.wih=numpy.random.normal(0.0,pow(self.hnodes,-0.5),(self.hnodes,self.inodes))
        self.who=numpy.random.normal(0.0,pow(self.onodes,-0.5),(self.onodes,self.hnodes))
        
        #学习率
        self.lr=learningrate
        
        #设置激活函数-S型函数
        self.avtivation_function=lambda x:scipy.special.expit(x)
        pass
    
    #训练神经网络，定义训练函数
    def train(self,inputs_list,targets_list):
        #转置输入行向量为列向量
        inputs=numpy.array(inputs_list,ndmin=2).T
        targets=numpy.array(targets_list,ndmin=2).T
        
        #计算值输入隐藏层
        hidden_inputs=numpy.dot(self.wih,inputs)
        #计算值输入激活函数
        hidden_outputs=self.avtivation_function(hidden_inputs)
        
        #计算值输入输出层
        final_inputs=numpy.dot(self.who,hidden_outputs)
        #计算值最终输出
        final_outputs=self.activation_function(final_inputs)
        #输出层误差为目标值-最终输出值
        output_errors=targets-final_outputs
        #隐藏层误差为输出层误差按连接权重分给每一个隐藏层节点
        hidden_errors=numpy.dot(self.who.T,output_errors)
        
        #更新隐藏层与输出层之间的连接权重
        self.who +=self.lr*numpy.dot((output_errors*final_outputs*(1.0-final_outputs)),numpy.transpose(hidden_outputs))
        #更新隐藏层与输入层之间的连接权重
        self.wih +=self.lr*numpy.dot((hidden_errors*hidden_outputs*(1.0-hidden_outputs)),numpy.transpose(inputs))
        pass
    
    #查询神经网络，定义查询函数
    def query(self,inputs_list):
        #转置输入行向量为列向量
        inputs=numpy.array(inputs_list,ndmin=2).T
        
        #计算值输入隐藏层
        hidden_inputs=numpy.dot(self.wih,inputs)
        #计算值输入激活函数
        hidden_outputs=self.avtivation_function(hidden_inputs)
        
        #计算值输入输出层
        final_inputs=numpy.dot(self.who,hidden_outputs)
        #计算值最终输出
        final_outputs=self.activation_function(final_inputs)
        
        return final_outputs
